---
layout: post
title: "SG2D应用生命周期与Walnut代理接口"
date: 2014-12-08 14:50:31
author: Geequlim
categories: 
- blog 
- SG2D
- Walnut
img: SG2DAppLifeCeycle.png
thumb: lifeRecycle.jpg

---


 SG2D应用程序由各个平台对应的Apllication类在创建其对象时由MainWindow类创建一个对应平台的RenderWindow对象，此时会创建SG2D的主角——舞台(Stage)。之后应用程序的启动、暂停、恢复运行、结束运行 等操作都由这个MainWindow类来管理。
 
 <!--more-->
 
* 应用程序启动时引擎会调用

        bool MainWindow::initializeContents()　　　　　　　　

* 应用程序结束时引擎会调用
        void MainWindow::uninitializeContents()　
* 应用程序暂停、恢复运行时引擎会调用

        void MainWindow::wndActivateChanged()　
        
这里需要注意的是应用的暂停和恢复运行状态，在PC平台上引擎并不会自动调用MainWindow::wndActivateChanged()方法，而Android和iOS平台上当应用正在运行时比如用户按下Home键或者应用在运行时用户接听电话等应用程序被切换到后台但并未退出时引擎会自动调用MainWindow::wndActivateChanged()方法，此时应用程序处于暂停状态，MainWindow类的布尔变量m_boActived值为false。于后台运行状态的应用再次被打开时便会恢复运行状态，此时引擎会也会调用MainWindow::wndActivateChanged()方法而m_boActived值为true。 

 由此我们可以根据应用程序的运行状态在以上MainWindow类的成员方法内写入代码来处理游戏运行的事件，如退出游戏时保存数据、释放内存；开始应用时加载游戏记录等操作。
 
 
###Walnnut生命周期代理接口：ApplicationDelegate 

根据上面的原理，我仿照Android的Activity生命周期为Walnut写了一个ApplicationDelegate类抽象出来接管这些应用状态事件。
 
为了方便以后处理事件，我让ApplicationDelegate类继承自SG2D::Object类。其成声明如下：

        #ifndef _APPLICATION_DELEGATE_H_
        #define _APPLICATION_DELEGATE_H_
        #include <sg2d/core/Object.h>
        /**应用程序代理类
        *此类代理了应用程序的 开始、暂停、恢复、结束 要调用的方法
        *★需要在应用程序初始化时创建本类对象，根据应用程序的需要调用相应的生命周期方法，并在应用程序结束时释放所创建的对象
        */
        class ApplicationDelegate : public SG2D::Object
        {
        typedef Object super;
        public:
        	ApplicationDelegate(void);
        	virtual ~ApplicationDelegate(void);
        	
        	//应用程序开始时调用此方法
        	bool onStart( SG2D::Stage * pStage);
        
        	//应用程序恢复运行时调用此方法
        	void onResume(SG2D::Stage *pStage);
        
        	//应用程序暂停时调用此方法
        	void onPause(SG2D::Stage * pStage);
        
        	//应用程序正常结束时调用此方法
        	void onStop(SG2D::Stage * pStage);    
            
            //事件处理
            void onEvent(Event & event);
        };
        #endif
        
至于ApplicationDelegate类的实现，则由你的需要自行定义。

###在SG2D项目中接入ApplicationDelegate

####1. 在项目stdafx.h头文件中添加代码

        class ApplicationDelegate;
        extern ApplicationDelegate * appDelegate;

####2. 修改MainWindow.cpp文件
    
定义ApplicationDelegate，初始化为空
    
    
        #include "ApplicationDelegate.h"
        ApplicationDelegate * appDelegate = NULL;

修改MainWindow::initializeContents()方法如下：
        
        bool MainWindow::initializeContents()
        {
                
        	if (!super::initializeContents())
        		return false;
        	appDelegate = new ApplicationDelegate();
        	traceSilently("==================== starting application ====================");
        	return  appDelegate->onStart(m_pStage);
        }

修改MainWindow::uninitializeContents()方法如下：
      
        void MainWindow::uninitializeContents()
        {
        	if (appDelegate)
        	{
        		appDelegate->onStop(m_pStage);
        		appDelegate->release();
        		appDelegate = NULL;//nullptr;
        	}
        	traceSilently("================= application stoped =================");
        	super::uninitializeContents();
        }
        
修改MainWindow::wndActivateChanged()方法如下：
     
        void MainWindow::wndActivateChanged()
        {
        	if (m_boActived)
        	{
        		traceSilently("================ resuming application ================");
        		if (appDelegate)
        			appDelegate->onResume(m_pStage);
        	}
        	else
        	{
        		if (appDelegate)
        			appDelegate->onPause(m_pStage);
        		traceSilently("===================== application paused =====================");
        	}
        	super::wndActivateChanged();
        }



####3.实现ApplicationDelegate类

根据个人需要实现ApplicationDelegate类的各个方法。